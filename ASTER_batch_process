import os
import time
import pandas as pd
import spectral.io.envi as e
from pprint import pprint

from ENVI import Task
from imageprocess import *
from auxfunc import *

if __name__ == '__main__':

    root_dir = r'H:\20240214_ASTER_Group1'

    input_dir = os.path.join(root_dir, 'ASTER_original_img')
    work_dir = os.path.join(root_dir, 'PyProcessing')
    output_dir = os.path.join(root_dir, 'PyPreprocessed')
    MNF_dir = os.path.join(root_dir, 'MNF')
    combine_dir = os.path.join(root_dir, 'Py_band_combination')
    alter_dir = os.path.join(root_dir, 'PyAlteration')
    PCA_dir = os.path.join(root_dir, 'PCA')

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    # if not os.path.exists(MNF_dir):
    #     os.makedirs(MNF_dir)

    # csv_fn = r"J:\20240103_Saudi_Group1_ASTER\whiteEdge_selected.csv"

    false_list = []
    time_list = []
    file_list = []
    no_exist_list = []

    steps = ['rad', ['VNSW_BIL', 'TIR_BIL'], ['fla', 'fla_mod', 'cloud', 'water', 'cor', 'cor_mod'], 'stack', 'excision']

    # steps = ['rad', ['VNSW_BIL', 'TIR_BIL']]
    '''
    ['excision', 'rad', ['VNSW_BIL', 'TIR_BIL'], ['fla', 'cloud', 'water', 'cor'], 'stack', 'rmEdge']
    step1 'excision': Preprocess.ASTER_EdgeExcision
    step2 'rad': Preprocess.RadioCali_ConvInter
    
    20240227 Note: excision and rad have been integrated into a single function: Preprocess.ASTER_EdgeExc_RadioCali_ConvInter
    
    step3 'VNSW_BIL', 'TIR_BIL': Preprocess.saveSelectedBands
    step4 'fla', 'cloud', 'water', 'cor': Task.ASTER_FLAASH, Task.ASTER_TIR_AtmosCor
    step5 'stack': Task.layerStack
    step6 'rmEdge': Task.removeEdge
    '''

    # fn_list = get_fn_list(input_dir=input_dir, ext='hdr')
    # fn_list = get_fn_list(input_dir, ext='hdr', csv_fn=csv_fn, csv_header='filename')
    fn_list = [
        r"H:\20240214_ASTER_Group1\ASTER_original_img\AST_L1T_00311242001074543_20150420134700_114978.hdr"]

    for idx, fn in enumerate(fn_list, start=1):
        print(f'Processing {get_fn_info(fn).base} | {idx}/{len(fn_list)} ...')
        input_raster_uri = fn
        basename = get_fn_info(fn).base
        opath = create_opath(input_raster_uri, work_dir, steps)
        output_fn = os.path.join(output_dir, f'{basename}_pro.img')
        MNF_fn = os.path.join(MNF_dir, f'{basename}_MNF.img')

        # if os.path.exists(MNF_fn):
        #     print(f'{basename} already preprocessed')
        #     continue

        if os.path.exists(input_raster_uri) is False:
            print(f'{input_raster_uri} does not exist')
            no_exist_list.append(basename)
        else:
            input_raster = e.open(input_raster_uri)
            # meta, bands = read_hdf(input_raster_uri)
            # print(input_raster)
            meta = input_raster.metadata
            interleave = meta['interleave']
            nl, ns, nb = input_raster.shape

            if nb < 14:
                print(f'Incomplete Data ({nb} bands)')
                false_list.append(basename)
            else:
                # if 'data gain values' not in meta or 'data offset values' not in meta:
                #     print('Incomplete metadata (Gain or Offset value missed)')
                #     false_list.append(basename)
                # else:

                start_time = time.time()

                time_list.append(meta['acquisition time'])
                file_list.append(basename)

                if in_list('rad', steps):
                    Preprocess.ASTER_EdgeExc_RadioCali_ConvInter(input_raster_uri, opath['rad'], out_interleave='bil',
                                                                 data_ignore_value=0.0)

                if in_list('VNSW_BIL', steps):
                    Preprocess.extractSelectedBands(opath['rad'], opath['VNSW_BIL'], bands=range(9),
                                                    out_interleave='bil')
                if in_list('TIR_BIL', steps):
                    Preprocess.extractSelectedBands(opath['rad'], opath['TIR_BIL'], bands=range(9, 14),
                                                    out_interleave='bil')

                if in_list('fla', steps):
                    Task.ASTER_FLAASH(opath['VNSW_BIL'], opath['fla'], opath['cloud'], opath['water'])
                if in_list('cor', steps):
                    Task.ASTER_TIR_AtmosCor(opath['TIR_BIL'], opath['cor'])
                if in_list('fla_mod', steps):
                    Preprocess.modifyValue(opath['fla'], opath['fla_mod'], scale=10000, max_val=10000, min_val=0,
                                           data_ignore_value=0, dtype=np.int16, time=meta['acquisition time'])
                if in_list('cor_mod', steps):
                    Preprocess.modifyValue(opath['cor'], opath['cor_mod'], scale=1, min_val=0,
                                           data_ignore_value=0, dtype=np.float32, time=meta['acquisition time'])

                if in_list('stack', steps):
                    Task.layerStack([opath['fla_mod'], opath['cor_mod']], opath['stack'])

                if in_list('excision', steps):
                    Preprocess.ASTER_EdgeExcision(opath['stack'], output_fn)

                    # if in_list('rmEdge', steps):
                    #     Task.removeEdge(opath['stack'], opath['rmEdge'], pixels=100)
                    #     # Task.removeEdge(fn, opath['rmEdge'], pixels=100)
                    #     Preprocess.ASTER_EdgeExcision(opath['rmEdge'], output_fn)

                    # Add time attr to metadata (time lost in Task.removeEdge)
                    output_meta_fn = output_fn.replace(get_fn_info(output_fn).ext, 'hdr')
                    output_meta = e.open(output_meta_fn).metadata
                    output_meta['acquisition time'] = meta['acquisition time']
                    output_meta['sensor type'] = 'ASTER'
                    # pprint(output_meta)
                    e.write_envi_header(output_meta_fn, output_meta)

                if in_list('MNF', steps):
                    Task.MNF_Trans(output_fn, MNF_fn)

                if in_list('combine', steps):
                    features = [
                        'AlOH_minerals,advanced_argillic_alteration',
                        'Clay,amphibole,laterite',
                        'Gossan,alteration,host_rock(1)',
                        'Decorellation',
                        'Silica,carbonate',
                        'Discrimination_for_mapping',
                        'Discrimination_in_sulphide_rich_areas',
                        'Silica,Fe2+',
                        'Enhanced_structual_features']

                    for feature in features:
                        BandMath.ASTER_combine(output_fn, MNF_fn, feature, combine_dir)

                if in_list('alter', steps):
                    PCA_fn = os.path.join(MNF_dir, f'{basename}_PCA.img')
                    # alter_dir = os.path.join()
                    alters = ['Fe_PC3', 'Fe_PC4', 'Al-OH_sericite', 'Al-OH_kaolinite', 'propy']
                    PCA_bands = ['1234', '1346', '1345', '1348']
                    alter_path = create_opath(input_raster_uri, alter_dir, steps=alters)
                    PCA_path = create_opath(input_raster_uri, PCA_dir, steps=PCA_bands)

                    BandMath.find_alteration(output_fn, PCA_path['1234'], alter_path['Fe_PC3'], bands=[1, 2, 3, 4],
                                             feature_PC=3)
                    BandMath.find_alteration(output_fn, PCA_path['1234'], alter_path['Fe_PC4'], bands=[1, 2, 3, 4],
                                             feature_PC=4)
                    BandMath.find_alteration(output_fn, PCA_path['1346'], alter_path['Al-OH_sericite'],
                                             bands=[1, 3, 4, 6],
                                             feature_PC=4, inverse=True)
                    BandMath.find_alteration(output_fn, PCA_path['1345'], alter_path['Al-OH_kaolinite'],
                                             bands=[1, 3, 4, 5],
                                             feature_PC=4)
                    BandMath.find_alteration(output_fn, PCA_path['1348'], alter_path['propy'], bands=[1, 3, 4, 8],
                                             feature_PC=3, inverse=True)

                end_time = time.time()
                consume = format_time(end_time - start_time)
                print(f"Workflow consumed time: {consume}")

    if false_list:
        pprint(false_list)
    if no_exist_list:
        pprint(no_exist_list)
